/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
//const PORT = 3000;

const app = express();

app.use(bodyParser.json());

// Array to store todo items.
let todos = [];
// Function to save todos to a file.
function saveTodosToFile() {
  fs.writeFileSync("./todos.json", JSON.stringify(todos), 'utf8');
}

//Function to load todos from a file.

function loadTodosFromFile() {
  try {
    const data = fs.readFileSync('./todos.json', 'utf8'); // data is utf8 string.
    todos = JSON.parse(data); // parsing utf8 string to an object.
  } catch (err) {
    todos = [];
  }
}

//load todos from file on startup.
loadTodosFromFile();

// Middlewares to handle unknown routes.
app.use((req, res, next) => {
  res.status(404).send('Not found');
})

// Get todos. retrieve all todo items.
app.get('/todos', (req, res) => {
  res.json(todos);
})

// Get todos/:id. retrieve a specific todo by its id.
app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const todo = todos.find((todo) => { todo.id === id });
  if (todo) {
    res.json(todo);
  } else {
    res.status(404).send('Not Found');
  }
})
// POST ---> Create a new todo item.
app.post('/todos', (req, res) => {
  const todo = req.body;
  todo.id = todos.length + 1;
  todos.push(todo);
  saveTodosToFile();
  res.status(201).json({ id: todo.id });
})

//PUT : update an existing item by id.
app.put('/todos/:id', (req, res) => {
  const id = req.params.id;
  const index = todos.findIndex(todo => todo.id === id);
  if (index !== -1) {
    //todos[index] = req.body //if you just want to replace the old object by req.body.
    todos[index] = { ...todos[index], ...req.body };
    /*
    Overall, this line of code updates the object at the specified 
    index in the todos array by merging its existing properties with 
    the properties sent in the HTTP request body (req.body). 
    The updated object replaces the existing object at that index 
    in the array.

    Combining both spread operators merges the properties from both 
    objects into a new object. If there are conflicting property names, 
    the values from req.body will overwrite those from todos[index].
    */
    saveTodosToFile();
    res.sendStatus(200);
  } else {
    res.status(404).send('Not Found');
  }
});

// DELETE /todos/:id
app.delete('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = todos.findIndex(todo => todo.id === id)
  if (index !== -1) {
    todos.splice(index, 1);
    saveTodosToFile();
    res.sendStatus(200);
  } else {
    res.status(404).send('Not Found');
  }
});
// app.listen(PORT, ()=>{
//   console.log("Server listening at port 3000");
// });
module.exports = app;